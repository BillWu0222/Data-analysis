{"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"## 1-1","metadata":{}},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.stats import shapiro, normaltest, ttest_ind\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error","metadata":{"execution":{"iopub.status.busy":"2023-12-31T06:07:21.641746Z","iopub.execute_input":"2023-12-31T06:07:21.642053Z","iopub.status.idle":"2023-12-31T06:07:23.506870Z","shell.execute_reply.started":"2023-12-31T06:07:21.642030Z","shell.execute_reply":"2023-12-31T06:07:23.505950Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\n\n# read CSV file\nfile_path = \"student-por2.csv\"\ndf = pd.read_csv(file_path)\n\ndf.head()\n","metadata":{},"execution_count":45,"outputs":[{"execution_count":45,"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>school</th>\n","      <th>sex</th>\n","      <th>age</th>\n","      <th>address</th>\n","      <th>famsize</th>\n","      <th>Pstatus</th>\n","      <th>Medu</th>\n","      <th>Fedu</th>\n","      <th>Mjob</th>\n","      <th>Fjob</th>\n","      <th>...</th>\n","      <th>famrel</th>\n","      <th>freetime</th>\n","      <th>goout</th>\n","      <th>Dalc</th>\n","      <th>Walc</th>\n","      <th>health</th>\n","      <th>absences</th>\n","      <th>G1</th>\n","      <th>G2</th>\n","      <th>G3</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>GP</td>\n","      <td>F</td>\n","      <td>18</td>\n","      <td>U</td>\n","      <td>GT3</td>\n","      <td>A</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>at_home</td>\n","      <td>teacher</td>\n","      <td>...</td>\n","      <td>4</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>11</td>\n","      <td>11</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>GP</td>\n","      <td>F</td>\n","      <td>17</td>\n","      <td>U</td>\n","      <td>GT3</td>\n","      <td>T</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>at_home</td>\n","      <td>other</td>\n","      <td>...</td>\n","      <td>5</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>9</td>\n","      <td>11</td>\n","      <td>11</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>GP</td>\n","      <td>F</td>\n","      <td>15</td>\n","      <td>U</td>\n","      <td>LE3</td>\n","      <td>T</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>at_home</td>\n","      <td>other</td>\n","      <td>...</td>\n","      <td>4</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>6</td>\n","      <td>12</td>\n","      <td>13</td>\n","      <td>12</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>GP</td>\n","      <td>F</td>\n","      <td>15</td>\n","      <td>U</td>\n","      <td>GT3</td>\n","      <td>T</td>\n","      <td>4</td>\n","      <td>2</td>\n","      <td>health</td>\n","      <td>services</td>\n","      <td>...</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>14</td>\n","      <td>14</td>\n","      <td>14</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>GP</td>\n","      <td>F</td>\n","      <td>16</td>\n","      <td>U</td>\n","      <td>GT3</td>\n","      <td>T</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>other</td>\n","      <td>other</td>\n","      <td>...</td>\n","      <td>4</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>11</td>\n","      <td>13</td>\n","      <td>13</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 33 columns</p>\n","</div>"],"text/plain":["  school sex  age address famsize Pstatus  Medu  Fedu     Mjob      Fjob  ...  \\\n","0     GP   F   18       U     GT3       A     4     4  at_home   teacher  ...   \n","1     GP   F   17       U     GT3       T     1     1  at_home     other  ...   \n","2     GP   F   15       U     LE3       T     1     1  at_home     other  ...   \n","3     GP   F   15       U     GT3       T     4     2   health  services  ...   \n","4     GP   F   16       U     GT3       T     3     3    other     other  ...   \n","\n","  famrel freetime  goout  Dalc  Walc health absences  G1  G2  G3  \n","0      4        3      4     1     1      3        4   0  11  11  \n","1      5        3      3     1     1      3        2   9  11  11  \n","2      4        3      2     2     3      3        6  12  13  12  \n","3      3        2      2     1     1      5        0  14  14  14  \n","4      4        3      2     1     2      5        0  11  13  13  \n","\n","[5 rows x 33 columns]"]},"metadata":{}}]},{"cell_type":"markdown","source":"### Please check and remove records with any NAs, and drop the grade columns G2 and G3. Then convert all the categorical variables into R factors or Python Pandas Categoricals.","metadata":{}},{"cell_type":"code","source":"# remove rows with missing values\ndf = df.dropna(axis=0, how='any')\n\n# drop columns 'G2' and 'G3'\ndf = df.drop(['G2', 'G3'], axis=1)\n\ndf.head()\n","metadata":{},"execution_count":46,"outputs":[{"execution_count":46,"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>school</th>\n","      <th>sex</th>\n","      <th>age</th>\n","      <th>address</th>\n","      <th>famsize</th>\n","      <th>Pstatus</th>\n","      <th>Medu</th>\n","      <th>Fedu</th>\n","      <th>Mjob</th>\n","      <th>Fjob</th>\n","      <th>...</th>\n","      <th>internet</th>\n","      <th>romantic</th>\n","      <th>famrel</th>\n","      <th>freetime</th>\n","      <th>goout</th>\n","      <th>Dalc</th>\n","      <th>Walc</th>\n","      <th>health</th>\n","      <th>absences</th>\n","      <th>G1</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>GP</td>\n","      <td>F</td>\n","      <td>18</td>\n","      <td>U</td>\n","      <td>GT3</td>\n","      <td>A</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>at_home</td>\n","      <td>teacher</td>\n","      <td>...</td>\n","      <td>no</td>\n","      <td>no</td>\n","      <td>4</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>GP</td>\n","      <td>F</td>\n","      <td>17</td>\n","      <td>U</td>\n","      <td>GT3</td>\n","      <td>T</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>at_home</td>\n","      <td>other</td>\n","      <td>...</td>\n","      <td>yes</td>\n","      <td>no</td>\n","      <td>5</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>9</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>GP</td>\n","      <td>F</td>\n","      <td>15</td>\n","      <td>U</td>\n","      <td>LE3</td>\n","      <td>T</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>at_home</td>\n","      <td>other</td>\n","      <td>...</td>\n","      <td>yes</td>\n","      <td>no</td>\n","      <td>4</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>6</td>\n","      <td>12</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>GP</td>\n","      <td>F</td>\n","      <td>15</td>\n","      <td>U</td>\n","      <td>GT3</td>\n","      <td>T</td>\n","      <td>4</td>\n","      <td>2</td>\n","      <td>health</td>\n","      <td>services</td>\n","      <td>...</td>\n","      <td>yes</td>\n","      <td>yes</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>14</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>GP</td>\n","      <td>F</td>\n","      <td>16</td>\n","      <td>U</td>\n","      <td>GT3</td>\n","      <td>T</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>other</td>\n","      <td>other</td>\n","      <td>...</td>\n","      <td>no</td>\n","      <td>no</td>\n","      <td>4</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>11</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 31 columns</p>\n","</div>"],"text/plain":["  school sex  age address famsize Pstatus  Medu  Fedu     Mjob      Fjob  ...  \\\n","0     GP   F   18       U     GT3       A     4     4  at_home   teacher  ...   \n","1     GP   F   17       U     GT3       T     1     1  at_home     other  ...   \n","2     GP   F   15       U     LE3       T     1     1  at_home     other  ...   \n","3     GP   F   15       U     GT3       T     4     2   health  services  ...   \n","4     GP   F   16       U     GT3       T     3     3    other     other  ...   \n","\n","  internet romantic  famrel  freetime  goout Dalc Walc health absences  G1  \n","0       no       no       4         3      4    1    1      3        4   0  \n","1      yes       no       5         3      3    1    1      3        2   9  \n","2      yes       no       4         3      2    2    3      3        6  12  \n","3      yes      yes       3         2      2    1    1      5        0  14  \n","4       no       no       4         3      2    1    2      5        0  11  \n","\n","[5 rows x 31 columns]"]},"metadata":{}}]},{"cell_type":"code","source":"# show column types\ndf.dtypes","metadata":{},"execution_count":47,"outputs":[{"execution_count":47,"output_type":"execute_result","data":{"text/plain":["school        object\n","sex           object\n","age            int64\n","address       object\n","famsize       object\n","Pstatus       object\n","Medu           int64\n","Fedu           int64\n","Mjob          object\n","Fjob          object\n","reason        object\n","guardian      object\n","traveltime     int64\n","studytime      int64\n","failures       int64\n","schoolsup     object\n","famsup        object\n","paid          object\n","activities    object\n","nursery       object\n","higher        object\n","internet      object\n","romantic      object\n","famrel         int64\n","freetime       int64\n","goout          int64\n","Dalc           int64\n","Walc           int64\n","health         int64\n","absences       int64\n","G1             int64\n","dtype: object"]},"metadata":{}}]},{"cell_type":"code","source":"# convert features with 'object' type to categorical type\n\nfor feature in df.columns:\n    if df[feature].dtype == 'object':\n        df[feature] = df[feature].astype('category')\ndf.head()","metadata":{},"execution_count":48,"outputs":[{"execution_count":48,"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>school</th>\n","      <th>sex</th>\n","      <th>age</th>\n","      <th>address</th>\n","      <th>famsize</th>\n","      <th>Pstatus</th>\n","      <th>Medu</th>\n","      <th>Fedu</th>\n","      <th>Mjob</th>\n","      <th>Fjob</th>\n","      <th>...</th>\n","      <th>internet</th>\n","      <th>romantic</th>\n","      <th>famrel</th>\n","      <th>freetime</th>\n","      <th>goout</th>\n","      <th>Dalc</th>\n","      <th>Walc</th>\n","      <th>health</th>\n","      <th>absences</th>\n","      <th>G1</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>GP</td>\n","      <td>F</td>\n","      <td>18</td>\n","      <td>U</td>\n","      <td>GT3</td>\n","      <td>A</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>at_home</td>\n","      <td>teacher</td>\n","      <td>...</td>\n","      <td>no</td>\n","      <td>no</td>\n","      <td>4</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>GP</td>\n","      <td>F</td>\n","      <td>17</td>\n","      <td>U</td>\n","      <td>GT3</td>\n","      <td>T</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>at_home</td>\n","      <td>other</td>\n","      <td>...</td>\n","      <td>yes</td>\n","      <td>no</td>\n","      <td>5</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>9</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>GP</td>\n","      <td>F</td>\n","      <td>15</td>\n","      <td>U</td>\n","      <td>LE3</td>\n","      <td>T</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>at_home</td>\n","      <td>other</td>\n","      <td>...</td>\n","      <td>yes</td>\n","      <td>no</td>\n","      <td>4</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>6</td>\n","      <td>12</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>GP</td>\n","      <td>F</td>\n","      <td>15</td>\n","      <td>U</td>\n","      <td>GT3</td>\n","      <td>T</td>\n","      <td>4</td>\n","      <td>2</td>\n","      <td>health</td>\n","      <td>services</td>\n","      <td>...</td>\n","      <td>yes</td>\n","      <td>yes</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>14</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>GP</td>\n","      <td>F</td>\n","      <td>16</td>\n","      <td>U</td>\n","      <td>GT3</td>\n","      <td>T</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>other</td>\n","      <td>other</td>\n","      <td>...</td>\n","      <td>no</td>\n","      <td>no</td>\n","      <td>4</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>11</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 31 columns</p>\n","</div>"],"text/plain":["  school sex  age address famsize Pstatus  Medu  Fedu     Mjob      Fjob  ...  \\\n","0     GP   F   18       U     GT3       A     4     4  at_home   teacher  ...   \n","1     GP   F   17       U     GT3       T     1     1  at_home     other  ...   \n","2     GP   F   15       U     LE3       T     1     1  at_home     other  ...   \n","3     GP   F   15       U     GT3       T     4     2   health  services  ...   \n","4     GP   F   16       U     GT3       T     3     3    other     other  ...   \n","\n","  internet romantic  famrel  freetime  goout Dalc Walc health absences  G1  \n","0       no       no       4         3      4    1    1      3        4   0  \n","1      yes       no       5         3      3    1    1      3        2   9  \n","2      yes       no       4         3      2    2    3      3        6  12  \n","3      yes      yes       3         2      2    1    1      5        0  14  \n","4       no       no       4         3      2    1    2      5        0  11  \n","\n","[5 rows x 31 columns]"]},"metadata":{}}]},{"cell_type":"code","source":"df.dtypes","metadata":{},"execution_count":49,"outputs":[{"execution_count":49,"output_type":"execute_result","data":{"text/plain":["school        category\n","sex           category\n","age              int64\n","address       category\n","famsize       category\n","Pstatus       category\n","Medu             int64\n","Fedu             int64\n","Mjob          category\n","Fjob          category\n","reason        category\n","guardian      category\n","traveltime       int64\n","studytime        int64\n","failures         int64\n","schoolsup     category\n","famsup        category\n","paid          category\n","activities    category\n","nursery       category\n","higher        category\n","internet      category\n","romantic      category\n","famrel           int64\n","freetime         int64\n","goout            int64\n","Dalc             int64\n","Walc             int64\n","health           int64\n","absences         int64\n","G1               int64\n","dtype: object"]},"metadata":{}}]},{"cell_type":"markdown","source":"## 1-2","metadata":{}},{"cell_type":"markdown","source":"### Here we consider the first period grade (G1) as the outcome/target. Please draw the density plot of G1 and perform normality tests to check if it is approximately normally distributed. Then, perform a proper bivariate test to check whether sex is associated with G1 (the significant level is 0.05).","metadata":{}},{"cell_type":"code","source":"import seaborn as sns\nfrom scipy.stats import shapiro, ttest_ind\nimport matplotlib.pyplot as plt\n\n# Draw the density plot of G1\nsns.distplot(df['G1'],fit = norm)\nplt.title(\"Density plot of G1\")\nplt.show()\n\n# Perform normality tests\nstat, p_value = shapiro(df['G1'])\nprint(f\"Statistics = {stat}\\np-value = {p_value}\")\nalpha = 0.05 \nif(p_value > alpha):\n    print(\"G1 is approximately normally distributed\")\nelse:\n    print(\"G1 is not approximately normally distributed\")","metadata":{},"execution_count":50,"outputs":[{"name":"stderr","output_type":"stream","text":"C:\\Users\\User\\anaconda3\\lib\\site-packages\\seaborn\\distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n\n  warnings.warn(msg, FutureWarning)\n"},{"output_type":"display_data","data":{"image/png":"","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"name":"stdout","output_type":"stream","text":"Statistics = 0.9855360984802246\n\np-value = 4.9233394747716375e-06\n\nG1 is not approximately normally distributed\n"}]},{"cell_type":"code","source":"from scipy.stats import pearsonr\n\ndf['sex_encoded'] = df['sex'].apply(lambda x: 0 if x == 'M' else 1)\n\n# Calculate the Pearson's correlation coefficient between sex and G1\npearson_correlation, pearson_p_value = pearsonr(df['sex_encoded'], df['G1'])\n\nprint(f\"Pearson's Correlation Coefficient: {pearson_correlation}\")\nprint(f\"P-Value for Pearson's Correlation: {pearson_p_value}\")\n\n# Check if the correlation is significant\nsignificant_level = 0.05\nif pearson_p_value < significant_level:\n    print(\"The Pearson correlation between sex and G1 is significant.\")\nelse:\n    print(\"The Pearson correlation between sex and G1 is not significant.\")","metadata":{},"execution_count":52,"outputs":[{"name":"stdout","output_type":"stream","text":"Pearson's Correlation Coefficient: 0.10410856829980733\n\nP-Value for Pearson's Correlation: 0.007946869649725062\n\nThe Pearson correlation between sex and G1 is significant.\n"}]},{"cell_type":"markdown","source":"## 1.3","metadata":{}},{"cell_type":"markdown","source":"#### Please create a function rmse(y_true, y_pred), which computes the RMSE of the model prediction.","metadata":{}},{"cell_type":"code","source":"from sklearn.metrics import mean_squared_error\n\ndef rmse(y_true, y_pred):\n    return np.sqrt(mean_squared_error(y_true, y_pred))","metadata":{},"execution_count":53,"outputs":[]},{"cell_type":"markdown","source":"## 1.4","metadata":{}},{"cell_type":"markdown","source":"#### Please split the data into training (70%) and testing (30%) sets with a random seed 0, \n#### and train models to predict the outcome/target G1. (Note that you should rescale the data if needed). \n#### Use any statistical learning and feature selection techniques to create a better model with low testing RMSE. \n#### Please report both the training and the testing RMSE of your models. \n#### Note that your testing RMSE must be at least lower than 2.35","metadata":{}},{"cell_type":"code","source":"# 1.4 \nX = df.drop('G1', axis=1)\ny = df['G1']\n\n#  split the data into training (70%) and testing (30%) sets with a random seed 0\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)\n\n# Grab categorical variables\ncategorical_columns = ['school', 'sex', 'address', 'famsize', 'Pstatus', 'Mjob', 'Fjob',\n                        'reason', 'guardian', 'schoolsup', 'famsup', 'paid', 'activities',\n                        'nursery', 'higher', 'internet', 'romantic']\n\n# Transform categorical variables\nX_train_encoded = pd.get_dummies(X_train, columns=categorical_columns, drop_first=True)\nX_test_encoded = pd.get_dummies(X_test, columns=categorical_columns, drop_first=True)\n\n# normalized data\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train_encoded)\nX_test_scaled = scaler.transform(X_test_encoded)\n\n# Train using a linear regression model\nmodel = LinearRegression()\nmodel.fit(X_train_scaled, y_train)\n\n# Make predictions on training and test sets\ntrain_preds = model.predict(X_train_scaled)\ntest_preds = model.predict(X_test_scaled)\n\n# Calculate RMSE of training set and test set\ntrain_rmse = rmse(y_train, train_preds)\ntest_rmse = rmse(y_test, test_preds)\n\n# print the result\nprint(f'Training RMSE: {train_rmse:.16f}')\nprint(f'Testing RMSE: {test_rmse:.16f}')\n","metadata":{},"execution_count":54,"outputs":[{"name":"stdout","output_type":"stream","text":"Training RMSE: 2.1677541553758739\n\nTesting RMSE: 2.3360601993032830\n"}]},{"cell_type":"markdown","source":"# 2-1","metadata":{}},{"cell_type":"markdown","source":"Split the data into training (70%) and testing (30%) datasets with\nrandom seed 0 ). Fit Logistic regression models that predict “HeartDiseaseorAttack”.Use or create any variables that may better predict the HeartDiseaseorAttack. What are the accuracy of predictions on both the training and the testing datasets, given the default probability cutoff value 0.5?","metadata":{}},{"cell_type":"code","source":"correlations = abs(df.corr()['HeartDiseaseorAttack']).sort_values()\ncorrelations","metadata":{"execution":{"iopub.status.busy":"2023-12-31T06:15:20.043105Z","iopub.execute_input":"2023-12-31T06:15:20.043479Z","iopub.status.idle":"2023-12-31T06:15:20.282024Z","shell.execute_reply.started":"2023-12-31T06:15:20.043450Z","shell.execute_reply":"2023-12-31T06:15:20.281189Z"},"trusted":true},"execution_count":19,"outputs":[{"execution_count":19,"output_type":"execute_result","data":{"text/plain":"AnyHealthcare           0.018734\nFruits                  0.019790\nHvyAlcoholConsump       0.028991\nNoDocbcCost             0.031000\nVeggies                 0.039167\nCholCheck               0.044206\nBMI                     0.052904\nMentHlth                0.064621\nSex                     0.086096\nPhysActivity            0.087299\nEducation               0.099600\nSmoker                  0.114441\nIncome                  0.141011\nDiabetes                0.180272\nHighChol                0.180765\nPhysHlth                0.181698\nStroke                  0.203002\nHighBP                  0.209361\nDiffWalk                0.212709\nAge                     0.221618\nGenHlth                 0.258383\nHeartDiseaseorAttack    1.000000\nName: HeartDiseaseorAttack, dtype: float64"},"metadata":{}}]},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import PolynomialFeatures\n\n#df = pd.read_csv('./GE2_datasets/heart_disease_health_indicators_BRFSS2015.csv')\ndf = pd.read_csv('/kaggle/input/bigdatage2/heart_disease_health_indicators_BRFSS2015.csv')\n# Assume 'HeartDiseaseorAttack' is the target variable and the rest are features\n# X = df.drop('HeartDiseaseorAttack', axis=1)\nX = df[['DiffWalk', 'Age', 'HighBP', 'PhysHlth', 'Stroke', 'GenHlth', 'HighChol', 'Diabetes']]\ny = df['HeartDiseaseorAttack']\n\ninteraction = PolynomialFeatures(degree=2, interaction_only=True, include_bias=False)\nX = interaction.fit_transform(X)\n\n# Split the data into training and testing datasets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)\n\n# Fit\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\ny_train_pred = model.predict(X_train)\ny_test_pred = model.predict(X_test)\ny_train_pred_prob = model.predict_proba(X_train)[:, 1]\ny_test_pred_prob = model.predict_proba(X_test)[:, 1]\n\ntrain_accuracy = accuracy_score(y_train, y_train_pred)\ntest_accuracy = accuracy_score(y_test, y_test_pred)\n\nprint(f'Training Accuracy: {train_accuracy}')\nprint(f'Testing Accuracy: {test_accuracy}')\n","metadata":{"execution":{"iopub.status.busy":"2023-12-31T06:12:34.325511Z","iopub.execute_input":"2023-12-31T06:12:34.325851Z","iopub.status.idle":"2023-12-31T06:12:36.527390Z","shell.execute_reply.started":"2023-12-31T06:12:34.325823Z","shell.execute_reply":"2023-12-31T06:12:36.524173Z"},"trusted":true},"execution_count":16,"outputs":[{"name":"stdout","text":"Training Accuracy: 0.9055052484569986\nTesting Accuracy: 0.9043282876064334\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# 2-2","metadata":{}},{"cell_type":"code","source":"import numpy as np\nfrom sklearn.metrics import roc_curve\n\n# 假設 y_test 和 y_test_pred_prob 已從前面模型中定義好\n# 計算 ROC 曲線\nfpr, tpr, cutoff = roc_curve(y_test, y_test_pred_prob)\n\n# 計算Youden's J index 去找 optimal cutoff\nyouden_j = tpr - fpr\noptimal_idx = np.argmax(youden_j)\noptimal_cutoff = cutoff[optimal_idx]\n\n# 找到 True Positive Rate 中預設的cutoff值 -> 0.5 \nclosest_05_idx = np.abs(cutoff - 0.5).argmin()\ntpr_05 = tpr[closest_05_idx]\n\n# True Positive Rate at the optimal cutoff\ntpr_optimal = tpr[optimal_idx]\n\nprint(\"Optimal Cutoff based on Youden's J index:\", optimal_cutoff)\nprint(\"True Positive Rate at Cutoff 0.5:\", tpr_05)\nprint(\"True Positive Rate at Optimal Cutoff:\", tpr_optimal)","metadata":{"execution":{"iopub.status.busy":"2023-12-31T06:12:38.109262Z","iopub.execute_input":"2023-12-31T06:12:38.109690Z","iopub.status.idle":"2023-12-31T06:12:38.131338Z","shell.execute_reply.started":"2023-12-31T06:12:38.109635Z","shell.execute_reply":"2023-12-31T06:12:38.130202Z"},"trusted":true},"execution_count":17,"outputs":[{"name":"stdout","text":"Optimal Cutoff based on Youden's J index: 0.08817037130560079\nTrue Positive Rate at Cutoff 0.5: 0.12871696035242292\nTrue Positive Rate at Optimal Cutoff: 0.7461453744493393\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# 2-3","metadata":{}},{"cell_type":"code","source":"from sklearn.metrics import roc_curve, auc\nimport matplotlib.pyplot as plt\n\n# 繪製ROC曲線以及取得AUC\ndef plotROC_calAUC(y_train, y_train_pred_prob,y_test, y_test_pred_prob):\n    # 計算ROC曲線和AUC (train)\n    fpr_train, tpr_train, _ = roc_curve(y_train, y_train_pred_prob)\n    roc_auc_train = auc(fpr_train, tpr_train)\n    # 計算ROC曲線和AUC (test)\n    fpr_test, tpr_test, _ = roc_curve(y_test, y_test_pred_prob)\n    roc_auc_test = auc(fpr_test, tpr_test)\n    # 繪製ROC曲線\n    plt.figure(figsize=(4, 4)) # 圖大小\n    plt.plot(fpr_train, tpr_train, color='darkorange', lw=2, label=f'Training, AUC = {roc_auc_train:.2f}') #繪製train ROC curves, 以及附上其AOC\n    plt.plot(fpr_test, tpr_test, color='navy', lw=2, label=f'Testing, AUC = {roc_auc_test:.2f}' )#繪製t ROC curves, 以及附上其AOC\n    plt.plot([0, 1], [0, 1], color='gray', lw=2, linestyle='--') #隨機猜測的情況 AUC = 0.5\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title('ROC Curve')\n    plt.legend(loc='lower right')\n    plt.show()\n    # 回傳 train, test AUCs 以作比較\n    return roc_auc_train,roc_auc_test\n\n\n# 假設各個 models 的 y_train 和 y_train_pred_prob 以及 y_test 和 y_test_pred_prob已從前面模型中定義好\ntrain_auc,test_auc = plotROC_calAUC(y_train, y_train_pred_prob,y_test, y_test_pred_prob)\nprint(\"Train AUC:\", train_auc,\" Test AUC:\", test_auc)","metadata":{"execution":{"iopub.status.busy":"2023-12-31T06:12:40.328848Z","iopub.execute_input":"2023-12-31T06:12:40.329254Z","iopub.status.idle":"2023-12-31T06:12:40.620700Z","shell.execute_reply.started":"2023-12-31T06:12:40.329218Z","shell.execute_reply":"2023-12-31T06:12:40.619500Z"},"trusted":true},"execution_count":18,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 400x400 with 1 Axes>","image/png":""},"metadata":{}},{"name":"stdout","text":"Train AUC: 0.7964217661617581  Test AUC: 0.8036472628462988\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}